
MODULE Dictionary;

   IMPORT SYSTEM, I := Interfaces;

   CONST
      t1cap =         103;
      t2cap =         413;
      t3cap =        1655;
      t4cap =        6625;
      t5cap =       26507;
      t6cap =      106039;
      t7cap =      424169;
      t8cap =     1696693;
      t9cap =     6786791;
      t10cap =   27147187;
      t11cap =  108588777;
      t12cap =  434355139;
      t13cap = 1737420593;


   TYPE
      KeyComparerTC* = POINTER TO KeyComparerTCDesc;
      KeyComparerTCDesc* = RECORD (I.TypeClassDesc)
	 Eql* : PROCEDURE(kc : KeyComparerTC; a, b : I.Obj) : BOOLEAN;
	 Hash* : PROCEDURE(kc : KeyComparerTC; a : I.Obj) : INTEGER
      END;

      Table = POINTER TO TableDesc;
      TableDesc = RECORD
	 count : INTEGER;
	 cap : INTEGER;
	 getkey : PROCEDURE(t : Table; i : INTEGER) : I.Obj;
	 getval : PROCEDURE(t : Table; i : INTEGER) : I.Obj;
	 set : PROCEDURE(t : Table; i : INTEGER; k, v : I.Obj)
      END;
      Table1 = POINTER TO Table1Desc;
      Table1Desc = RECORD (Table)
	 keys : ARRAY t1cap OF I.Obj;
	 vals : ARRAY t1cap OF I.Obj
      END;
      Table2 = POINTER TO Table2Desc;
      Table2Desc = RECORD (Table)
	 keys : ARRAY t2cap OF I.Obj;
	 vals : ARRAY t2cap OF I.Obj
      END;
      Table3 = POINTER TO Table3Desc;
      Table3Desc = RECORD (Table)
	 keys : ARRAY t3cap OF I.Obj;
	 vals : ARRAY t3cap OF I.Obj
      END;
      Table4 = POINTER TO Table4Desc;
      Table4Desc = RECORD (Table)
	 keys : ARRAY t4cap OF I.Obj;
	 vals : ARRAY t4cap OF I.Obj
      END;
      Table5 = POINTER TO Table5Desc;
      Table5Desc = RECORD (Table)
	 keys : ARRAY t5cap OF I.Obj;
	 vals : ARRAY t5cap OF I.Obj
      END;
      Table6 = POINTER TO Table6Desc;
      Table6Desc = RECORD (Table)
	 keys : ARRAY t6cap OF I.Obj;
	 vals : ARRAY t6cap OF I.Obj
      END;
      Table7 = POINTER TO Table7Desc;
      Table7Desc = RECORD (Table)
	 keys : ARRAY t7cap OF I.Obj;
	 vals : ARRAY t7cap OF I.Obj
      END;
      Table8 = POINTER TO Table8Desc;
      Table8Desc = RECORD (Table)
	 keys : ARRAY t8cap OF I.Obj;
	 vals : ARRAY t8cap OF I.Obj
      END;
      Table9 = POINTER TO Table9Desc;
      Table9Desc = RECORD (Table)
	 keys : ARRAY t9cap OF I.Obj;
	 vals : ARRAY t9cap OF I.Obj
      END;
      Table10 = POINTER TO Table10Desc;
      Table10Desc = RECORD (Table)
	 keys : ARRAY t10cap OF I.Obj;
	 vals : ARRAY t10cap OF I.Obj
      END;
      Table11 = POINTER TO Table11Desc;
      Table11Desc = RECORD (Table)
	 keys : ARRAY t11cap OF I.Obj;
	 vals : ARRAY t11cap OF I.Obj
      END;
      Table12 = POINTER TO Table12Desc;
      Table12Desc = RECORD (Table)
	 keys : ARRAY t12cap OF I.Obj;
	 vals : ARRAY t12cap OF I.Obj
      END;
      Table13 = POINTER TO Table13Desc;
      Table13Desc = RECORD (Table)
	 keys : ARRAY t13cap OF I.Obj;
	 vals : ARRAY t13cap OF I.Obj
      END;
      
      Dict* = POINTER TO DictDesc;
      DictDesc* = RECORD
	 table : Table;
	 keyclass : KeyComparerTC
      END;

      Visitor* = PROCEDURE(k, v : I.Obj; state : I.Obj) : BOOLEAN;

      Tomb = POINTER TO TombDesc;
      TombDesc = RECORD (I.ObjDesc) END;
	 

   VAR tomb : Tomb;
      ibits : INTEGER;
      ibits_2 : INTEGER;


   PROCEDURE uppercap(n : INTEGER) : INTEGER;
   BEGIN
      RETURN n + ASR(n, 1)
   END uppercap;

      

   (* hack around O7's lack of dynamic open arrays *)


   (* table size class 1 *)
   PROCEDURE getkey1(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table1).keys[i]
   END getkey1;
   
   PROCEDURE getval1(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table1).vals[i]
   END getval1;
   
   PROCEDURE set1(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t1 : Table1;
   BEGIN
      t1 := t(Table1);
      t1.keys[i] := k;
      t1.vals[i] := v;
   END set1;
   
   PROCEDURE mk1() : Table;
      VAR t : Table1;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey1; t.getval := getval1; t.set := set1; 
      RETURN t
   END mk1;


   (* table size class 2 *)
   PROCEDURE getkey2(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table2).keys[i]
   END getkey2;
   
   PROCEDURE getval2(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table2).vals[i]
   END getval2;
   
   PROCEDURE set2(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t2 : Table2;
   BEGIN
      t2 := t(Table2);
      t2.keys[i] := k;
      t2.vals[i] := v;
   END set2;
   
   PROCEDURE mk2() : Table;
      VAR t : Table2;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey2; t.getval := getval2; t.set := set2; 
      RETURN t
   END mk2;

   
   (* table size class 3 *)
   PROCEDURE getkey3(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table3).keys[i]
   END getkey3;
   
   PROCEDURE getval3(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table3).vals[i]
   END getval3;
   
   PROCEDURE set3(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t3 : Table3;
   BEGIN
      t3 := t(Table3);
      t3.keys[i] := k;
      t3.vals[i] := v;
   END set3;
   
   PROCEDURE mk3() : Table;
      VAR t : Table3;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey3; t.getval := getval3; t.set := set3; 
      RETURN t
   END mk3;

   
   (* table size class 4 *)
   PROCEDURE getkey4(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table4).keys[i]
   END getkey4;
   
   PROCEDURE getval4(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table4).vals[i]
   END getval4;
   
   PROCEDURE set4(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t4 : Table4;
   BEGIN
      t4 := t(Table4);
      t4.keys[i] := k;
      t4.vals[i] := v;
   END set4;
   
   PROCEDURE mk4() : Table;
      VAR t : Table4;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey4; t.getval := getval4; t.set := set4; 
      RETURN t
   END mk4;

   
   (* table size class 5 *)
   PROCEDURE getkey5(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table5).keys[i]
   END getkey5;
   
   PROCEDURE getval5(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table5).vals[i]
   END getval5;
   
   PROCEDURE set5(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t5 : Table5;
   BEGIN
      t5 := t(Table5);
      t5.keys[i] := k;
      t5.vals[i] := v;
   END set5;
   
   PROCEDURE mk5() : Table;
      VAR t : Table5;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey5; t.getval := getval5; t.set := set5; 
      RETURN t
   END mk5;


   (* table size class 6 *)
   PROCEDURE getkey6(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table6).keys[i]
   END getkey6;
   
   PROCEDURE getval6(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table6).vals[i]
   END getval6;
   
   PROCEDURE set6(t : Table; i : INTEGER; k ,v : I.Obj);
      VAR t6 : Table6;
   BEGIN
      t6 := t(Table6);
      t6.keys[i] := k;
      t6.vals[i] := v;
   END set6;
   
   PROCEDURE mk6() : Table;
      VAR t : Table6;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey6; t.getval := getval6; t.set := set6; 
      RETURN t
   END mk6;

   
   (* table size class 7 *)
   PROCEDURE getkey7(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table7).keys[i]
   END getkey7;
   
   PROCEDURE getval7(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table7).vals[i]
   END getval7;
   
   PROCEDURE set7(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t7 : Table7;
   BEGIN
      t7 := t(Table7);
      t7.keys[i] := k;
      t7.vals[i] := v;
   END set7;
   
   PROCEDURE mk7() : Table;
      VAR t : Table7;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey7; t.getval := getval7; t.set := set7; 
      RETURN t
   END mk7;


   (* table size class 8 *)
   PROCEDURE getkey8(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table8).keys[i]
   END getkey8;
   
   PROCEDURE getval8(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table8).vals[i]
   END getval8;
   
   PROCEDURE set8(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t8 : Table8;
   BEGIN
      t8 := t(Table8);
      t8.keys[i] := k;
      t8.vals[i] := v;
   END set8;
   
   PROCEDURE mk8() : Table;
      VAR t : Table8;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey8; t.getval := getval8; t.set := set8; 
      RETURN t
   END mk8;


   (* table size class 9 *)
   PROCEDURE getkey9(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table9).keys[i]
   END getkey9;
   
   PROCEDURE getval9(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table9).vals[i]
   END getval9;
   
   PROCEDURE set9(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t9 : Table9;
   BEGIN
      t9 := t(Table9);
      t9.keys[i] := k;
      t9.vals[i] := v;
   END set9;
   
   PROCEDURE mk9() : Table;
      VAR t : Table9;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey9; t.getval := getval9; t.set := set9; 
      RETURN t
   END mk9;


   (* table size class 10 *)
   PROCEDURE getkey10(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table10).keys[i]
   END getkey10;
   
   PROCEDURE getval10(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table10).vals[i]
   END getval10;
   
   PROCEDURE set10(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t10 : Table10;
   BEGIN
      t10 := t(Table10);
      t10.keys[i] := k;
      t10.vals[i] := v;
   END set10;
   
   PROCEDURE mk10() : Table;
      VAR t : Table10;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey10; t.getval := getval10; t.set := set10; 
      RETURN t
   END mk10;


   (* table size class 11 *)
   PROCEDURE getkey11(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table11).keys[i]
   END getkey11;
   
   PROCEDURE getval11(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table11).vals[i]
   END getval11;
   
   PROCEDURE set11(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t11 : Table11;
   BEGIN
      t11 := t(Table11);
      t11.keys[i] := k;
      t11.vals[i] := v;
   END set11;
   
   PROCEDURE mk11() : Table;
      VAR t : Table11;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey11; t.getval := getval11; t.set := set11; 
      RETURN t
   END mk11;


   (* table size class 12 *)
   PROCEDURE getkey12(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table12).keys[i]
   END getkey12;
   
   PROCEDURE getval12(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table12).vals[i]
   END getval12;
   
   PROCEDURE set12(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t12 : Table12;
   BEGIN
      t12 := t(Table12);
      t12.keys[i] := k;
      t12.vals[i] := v;
   END set12;
   
   PROCEDURE mk12() : Table;
      VAR t : Table12;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey12; t.getval := getval12; t.set := set12; 
      RETURN t
   END mk12;


   (* table size class 13 *)
   PROCEDURE getkey13(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table13).keys[i]
   END getkey13;
   
   PROCEDURE getval13(t : Table; i : INTEGER) : I.Obj;
   BEGIN
      RETURN t(Table13).vals[i]
   END getval13;
   
   PROCEDURE set13(t : Table; i : INTEGER; k, v : I.Obj);
      VAR t13 : Table13;
   BEGIN
      t13 := t(Table13);
      t13.keys[i] := k;
      t13.vals[i] := v;
   END set13;
   
   PROCEDURE mk13() : Table;
      VAR t : Table13;
   BEGIN
      NEW(t); t.cap := LEN(t.keys); t.getkey := getkey13; t.getval := getval13; t.set := set13; 
      RETURN t
   END mk13;


   (* create the smallest table type that will hold at least the requested # of elements *)
   PROCEDURE MkTable(size : INTEGER) : Table;
      VAR t : Table;
   BEGIN
      IF size <= t1cap THEN
	 t := mk1();
      ELSIF size <= t2cap THEN
	 t := mk2();
      ELSIF size <= t3cap THEN
	 t := mk3();
      ELSIF size <= t4cap THEN
	 t := mk4();
      ELSIF size <= t5cap THEN
	 t := mk5();
      ELSIF size <= t6cap THEN
	 t := mk6();
      ELSIF size <= t7cap THEN
	 t := mk7();
      ELSIF size <= t8cap THEN
	 t := mk8();
      ELSIF size <= t9cap THEN
	 t := mk9();
      ELSIF size <= t10cap THEN
	 t := mk10();
      ELSIF size <= t11cap THEN
	 t := mk11();
      ELSIF size <= t12cap THEN
	 t := mk12();
      ELSE
	 t := mk13();
      END;
      RETURN t
   END MkTable;



   (* hash table implementation *)
   
   PROCEDURE mixhash(h : INTEGER) : INTEGER;
   BEGIN
      RETURN SYSTEM.VAL(INTEGER, SYSTEM.VAL(SET, ROR(h, ibits_2)) + SYSTEM.VAL(SET, h))
   END mixhash;


   PROCEDURE insert(kc : KeyComparerTC; t : Table; key, val : I.Obj) : BOOLEAN;
      VAR i, h : INTEGER;
	 misses : INTEGER;
	 probe : I.Obj;
	 inserted : BOOLEAN;
   BEGIN
      h := mixhash(kc.Hash(kc, key));
      i := h MOD t.cap;
      misses := 0;
      probe := t.getkey(t, i);
      WHILE (probe # NIL) & (probe # tomb) & ~kc.Eql(kc, probe, key) DO
	 i := (i + 1) MOD t.cap;
	 probe := t.getkey(t, i);
	 INC(misses);
      END;
      IF (probe = NIL) OR (probe = tomb) THEN
	 inserted := TRUE;
      ELSE
	 inserted := FALSE;
      END;
      t.set(t, i, key, val);
      RETURN inserted
   END insert;


   PROCEDURE rehash(kc : KeyComparerTC; dst, src : Table);
      VAR i, n : INTEGER;
	 k, v : I.Obj;
	 inserted : BOOLEAN;
   BEGIN
      n := src.cap;
      FOR i := 0 TO n-1 DO
	 k := src.getkey(src,i);
	 IF (k # NIL) & (k # tomb) THEN
	    v := src.getval(src,i);
	    inserted := insert(kc, dst, k, v);
	 END;
      END;
      dst.count := src.count;
   END rehash;


   PROCEDURE growIfNecessary(kc : KeyComparerTC; t : Table) : Table;
      VAR targetcap : INTEGER;
	 dst : Table;
   BEGIN
      targetcap := uppercap(t.count);
      IF targetcap <= t.cap THEN
	 dst := t;
      ELSE
	 dst := MkTable(targetcap);
	 rehash(kc, dst, t);
      END;
      RETURN dst
   END growIfNecessary;


   PROCEDURE Insert*(VAR dict : DictDesc; k, v : I.Obj);
      VAR inserted : BOOLEAN;
   BEGIN
      dict.table := growIfNecessary(dict.keyclass, dict.table);
      inserted := insert(dict.keyclass, dict.table, k, v);
      IF inserted THEN
	 INC(dict.table.count);
      END;
   END Insert;


   PROCEDURE find(kc : KeyComparerTC; VAR t : Table; k : I.Obj) : INTEGER;
      VAR i, h : INTEGER;
	 probe : I.Obj;
   BEGIN
      h := mixhash(kc.Hash(kc, k));
      i := h MOD t.cap;
      probe := t.getkey(t, i);
      WHILE (probe = tomb) OR ((probe # NIL) & ~kc.Eql(kc, probe, k)) DO
	 i := (i + 1) MOD t.cap;
	 probe := t.getkey(t, i);
      END;
      RETURN i
   END find;
   

   PROCEDURE shrinkIfNecessary(kc : KeyComparerTC; t : Table) : Table;
      VAR targetcap : INTEGER;
	 dst : Table;
   BEGIN
      targetcap := uppercap(t.count);
      targetcap := targetcap + ASR(targetcap,1);
      IF targetcap >= ASR(t.cap, 4) THEN
	 dst := t;
      ELSE
	 dst := MkTable(targetcap);
	 rehash(kc, dst, t);
      END;
      RETURN dst
   END shrinkIfNecessary;


   PROCEDURE DeleteKey*(VAR dict : DictDesc; k : I.Obj);
      VAR i : INTEGER;
	 probe : I.Obj;
   BEGIN
      i := find(dict.keyclass, dict.table, k);
      probe := dict.table.getkey(dict.table, i);
      IF (probe # NIL) THEN
	 dict.table.set(dict.table, i, tomb, NIL);
	 DEC(dict.table.count);
      END;
      dict.table := shrinkIfNecessary(dict.keyclass, dict.table);
   END DeleteKey;


   PROCEDURE ContainsKey*(VAR dict : DictDesc; k : I.Obj) : BOOLEAN;
      VAR i : INTEGER;
	 probe : I.Obj;
	 exists : BOOLEAN;
   BEGIN
      i := find(dict.keyclass, dict.table, k);
      probe := dict.table.getkey(dict.table, i);
      IF (probe # NIL) THEN
	 exists := TRUE;
      ELSE
	 exists := FALSE;
      END;
      RETURN exists
   END ContainsKey;


   PROCEDURE Get*(VAR dict : DictDesc; k : I.Obj) : I.Obj;
      VAR i : INTEGER;
   BEGIN
      i := find(dict.keyclass, dict.table, k);
      RETURN dict.table.getval(dict.table, i)
   END Get;


   PROCEDURE Count*(VAR dict : DictDesc) : INTEGER;
   BEGIN
      RETURN dict.table.count
   END Count;


   PROCEDURE Visit*(VAR dict : DictDesc; visit : Visitor; state: I.Obj);
      VAR i : INTEGER;
	 k, v : I.Obj;
	 t : Table;
	 continue : BOOLEAN;
   BEGIN
      continue := TRUE;
      t := dict.table;
      i := 0;
      WHILE (i < t.cap) & continue DO
	 k := t.getkey(t, i);
	 IF (k # NIL) & (k # tomb) THEN
	    v := t.getval(t, i);
	    continue := visit(k, v, state);
	 END;
	 INC(i);
      END;
   END Visit;


   PROCEDURE Init*(VAR dict : DictDesc; comparer : KeyComparerTCDesc);
   BEGIN
      dict.table := mk1();
      NEW(dict.keyclass); dict.keyclass^ := comparer;
   END Init;


   PROCEDURE InitCap*(VAR dict : DictDesc; comparer : KeyComparerTCDesc; count: INTEGER);
   BEGIN
      dict.table := MkTable(uppercap(count));
      NEW(dict.keyclass); dict.keyclass^ := comparer;
   END InitCap;


   PROCEDURE New*(kc : KeyComparerTCDesc) : Dict;
      VAR dict : Dict;
   BEGIN
      NEW(dict);
      Init(dict^, kc);
      RETURN dict
   END New;


   PROCEDURE NewCap*(count : INTEGER; kc : KeyComparerTCDesc) : Dict;
      VAR dict : Dict;
   BEGIN
      NEW(dict);
      InitCap(dict^, kc, count);
      RETURN dict
   END NewCap;


   PROCEDURE findibits() : INTEGER;
      VAR i, n : INTEGER;
   BEGIN
      n := 0;
      i := 1;
      WHILE i # 0 DO
	 i := LSL(i, 1);
	 INC(n);
      END;
      RETURN n
   END findibits;

BEGIN
   NEW(tomb);
   ibits := findibits();
   ibits_2 := ASR(ibits, 1);
END Dictionary.
